#!/usr/bin/env python3
"""
Snowflake SQL Generation Script
===============================

This script generates environment-specific Snowflake SQL files from templates
by replacing environment variables. It supports dev, staging, and prod environments.

Usage:
    python scripts/generate_snowflake_sql.py [environment]
    
Examples:
    python scripts/generate_snowflake_sql.py dev
    python scripts/generate_snowflake_sql.py staging
    python scripts/generate_snowflake_sql.py prod

Environment Variables:
    You can override default values by setting environment variables:
    - SNOWFLAKE_DATABASE_DEV, SNOWFLAKE_DATABASE_STAGING, SNOWFLAKE_DATABASE_PROD
    - SNOWFLAKE_WAREHOUSE_DEV, SNOWFLAKE_WAREHOUSE_STAGING, SNOWFLAKE_WAREHOUSE_PROD
    - S3_BUCKET_DEV, S3_BUCKET_STAGING, S3_BUCKET_PROD
"""

import os
import sys
import argparse
from pathlib import Path
from datetime import datetime


def get_default_config():
    """Get default configuration for all environments"""
    return {
        'dev': {
            'SNOWFLAKE_DATABASE': os.getenv('SNOWFLAKE_DATABASE_DEV', 'ECOMMERCE_DB'),
            'SNOWFLAKE_WAREHOUSE': os.getenv('SNOWFLAKE_WAREHOUSE_DEV', 'INT_WH'),
            'S3_BUCKET_NAME': os.getenv('S3_BUCKET_DEV', 'my-amazing-app'),
        },
        'staging': {
            'SNOWFLAKE_DATABASE': os.getenv('SNOWFLAKE_DATABASE_STAGING', 'ECOMMERCE_STAGING_DB'),
            'SNOWFLAKE_WAREHOUSE': os.getenv('SNOWFLAKE_WAREHOUSE_STAGING', 'COMPUTE_WH_STAGING'),
            'S3_BUCKET_NAME': os.getenv('S3_BUCKET_STAGING', 'my-amazing-app-staging'),
        },
        'prod': {
            'SNOWFLAKE_DATABASE': os.getenv('SNOWFLAKE_DATABASE_PROD', 'ECOMMERCE_PROD_DB'),
            'SNOWFLAKE_WAREHOUSE': os.getenv('SNOWFLAKE_WAREHOUSE_PROD', 'COMPUTE_WH_PROD'),
            'S3_BUCKET_NAME': os.getenv('S3_BUCKET_PROD', 'my-amazing-app-prod'),
        }
    }


def replace_variables(content, variables):
    """Replace variables in SQL content with environment-specific values"""
    for key, value in variables.items():
        # Replace ${VAR_NAME} format
        content = content.replace(f"${{{key}}}", value)
        # Replace $VAR_NAME format (without braces)
        content = content.replace(f"${key}", value)
    return content


def validate_environment(environment):
    """Validate that the environment is supported"""
    supported_envs = ['dev', 'staging', 'prod']
    if environment not in supported_envs:
        print(f"‚ùå Error: Unsupported environment '{environment}'")
        print(f"Supported environments: {', '.join(supported_envs)}")
        return False
    return True


def get_template_files():
    """Get list of SQL template files to process"""
    return [
        '01_create_file_formats.sql',
        '02_bronze_layer.sql', 
        '03_bronze_checks.sql',
        '04_silver_layer.sql',
        '05_gold_layer.sql',
        '06_final_checks.sql'
    ]


def create_output_directory(environment):
    """Create output directory for generated files"""
    output_dir = Path('generated_sql') / environment
    output_dir.mkdir(parents=True, exist_ok=True)
    return output_dir


def generate_header(environment, variables):
    """Generate header comment for SQL files"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")
    return f"""-- =========================================================================
-- Generated Snowflake SQL for {environment.upper()} environment
-- =========================================================================
-- Generated on: {timestamp}
-- Environment: {environment}
-- Database: {variables['SNOWFLAKE_DATABASE']}
-- Warehouse: {variables['SNOWFLAKE_WAREHOUSE']}
-- S3 Bucket: {variables['S3_BUCKET_NAME']}
-- =========================================================================
-- 
-- ‚ö†Ô∏è  DO NOT EDIT THIS FILE DIRECTLY!
-- This file is automatically generated from templates.
-- Edit the template files in the snowflake/ directory instead.
-- =========================================================================

"""


def process_template_file(template_path, output_path, variables, environment):
    """Process a single template file"""
    if not template_path.exists():
        print(f"Template file not found: {template_path}")
        return False
        
    print(f"Processing {template_path.name}...")
    
    try:
        # Read template content
        with open(template_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Replace variables
        processed_content = replace_variables(content, variables)
        
        # Add header comment
        header = generate_header(environment, variables)
        final_content = header + processed_content
        
        # Write processed file
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(final_content)
            
        print(f"‚úÖ Generated {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error processing {template_path.name}: {str(e)}")
        return False


def create_environment_readme(output_dir, environment, variables):
    """Create README file for the generated environment"""
    readme_content = f"""# Generated Snowflake SQL Files - {environment.upper()} Environment

This directory contains the generated Snowflake SQL files for the **{environment}** environment.

## Environment Configuration

- **Database**: `{variables['SNOWFLAKE_DATABASE']}`
- **Warehouse**: `{variables['SNOWFLAKE_WAREHOUSE']}`
- **S3 Bucket**: `{variables['S3_BUCKET_NAME']}`
- **Generated**: {datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")}

## Files

1. **01_create_file_formats.sql** - File formats for Parquet data
2. **02_bronze_layer.sql** - External tables (Bronze layer)
3. **03_bronze_checks.sql** - Data validation and quality checks
4. **04_silver_layer.sql** - Iceberg tables (Silver layer)
5. **05_gold_layer.sql** - Analytics views (Gold layer)
6. **06_final_checks.sql** - Final validation and examples

## Execution Order

Execute the files in the order listed above. You can run them in Snowflake using:

```sql
-- 1. Set up file formats
@01_create_file_formats.sql

-- 2. Create bronze layer tables
@02_bronze_layer.sql

-- 3. Validate bronze layer data
@03_bronze_checks.sql

-- 4. Create silver layer tables
@04_silver_layer.sql

-- 5. Create gold layer views
@05_gold_layer.sql

-- 6. Run final checks and examples
@06_final_checks.sql
```

## Notes

- ‚ö†Ô∏è  **Do not edit these files directly** - they are automatically generated
- Modify the template files in the `snowflake/` directory instead
- All variables have been replaced with environment-specific values
- No credentials are included in these files
- Re-generate files when templates change using: `python scripts/generate_snowflake_sql.py {environment}`

## Template Variables Replaced

The following variables were replaced in the templates:

| Variable | Value |
|----------|-------|
| `SNOWFLAKE_DATABASE` | `{variables['SNOWFLAKE_DATABASE']}` |
| `SNOWFLAKE_WAREHOUSE` | `{variables['SNOWFLAKE_WAREHOUSE']}` |
| `S3_BUCKET_NAME` | `{variables['S3_BUCKET_NAME']}` |

## Regeneration

To regenerate these files:

```bash
# From project root directory
python scripts/generate_snowflake_sql.py {environment}
```
"""
    
    readme_path = output_dir / 'README.md'
    with open(readme_path, 'w', encoding='utf-8') as f:
        f.write(readme_content)
        
    print(f"‚úÖ Generated {readme_path}")


def validate_generated_files(output_dir, environment):
    """Validate the generated SQL files"""
    print(f"\nüîç Validating generated files for {environment} environment...")
    
    sql_files = list(output_dir.glob('*.sql'))
    
    if not sql_files:
        print("‚ùå No SQL files were generated!")
        return False
    
    validation_passed = True
    
    for sql_file in sql_files:
        print(f"üîç Validating {sql_file.name}...")
        
        # Check file is not empty
        if sql_file.stat().st_size == 0:
            print(f"‚ùå {sql_file.name} is empty!")
            validation_passed = False
            continue
        
        # Read file content for validation
        with open(sql_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Check for unreplaced template variables
        if '${' in content:
            print(f"‚ö†Ô∏è  {sql_file.name} contains unreplaced variables")
            # Find and show unreplaced variables
            import re
            unreplaced = re.findall(r'\$\{[^}]+\}', content)
            for var in set(unreplaced):
                print(f"   - {var}")
        
        # Basic SQL syntax check
        sql_keywords = ['CREATE', 'SELECT', 'INSERT', 'UPDATE', 'DELETE', 'DROP', 'ALTER', 'USE']
        if not any(keyword in content.upper() for keyword in sql_keywords):
            print(f"‚ö†Ô∏è  {sql_file.name} might not contain valid SQL statements")
        
        # Check for environment-specific values
        env_upper = environment.upper()
        if env_upper not in content:
            print(f"‚ö†Ô∏è  {sql_file.name} might not contain {env_upper} environment values")
        
        print(f"‚úÖ {sql_file.name} validation completed")
    
    return validation_passed


def generate_sql_files(environment):
    """Main function to generate SQL files for a specific environment"""
    print(f"üöÄ Generating Snowflake SQL files for {environment} environment...")
    
    # Validate environment
    if not validate_environment(environment):
        return False
    
    # Get configuration
    config = get_default_config()
    variables = config[environment]
    
    print(f"üìã Configuration for {environment}:")
    for key, value in variables.items():
        print(f"   {key}: {value}")
    print()
    
    # Create output directory
    output_dir = create_output_directory(environment)
    print(f"üìÅ Output directory: {output_dir}")
    
    # Get template files
    template_files = get_template_files()
    
    # Process each template file
    success_count = 0
    for template_file in template_files:
        template_path = Path('snowflake') / template_file
        output_path = output_dir / template_file
        
        if process_template_file(template_path, output_path, variables, environment):
            success_count += 1
    
    # Create README
    create_environment_readme(output_dir, environment, variables)
    
    # Validate generated files
    validation_passed = validate_generated_files(output_dir, environment)
    
    # Summary
    print(f"\nüìä Generation Summary:")
    print(f"   Environment: {environment}")
    print(f"   Templates processed: {success_count}/{len(template_files)}")
    print(f"   Output directory: {output_dir}")
    print(f"   Validation: {'‚úÖ Passed' if validation_passed else '‚ö†Ô∏è  Issues found'}")
    
    if success_count == len(template_files) and validation_passed:
        print(f"\nüéâ All SQL files generated successfully for {environment} environment!")
        return True
    else:
        print(f"\n‚ö†Ô∏è  Some issues were encountered during generation.")
        return False


def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(
        description='Generate Snowflake SQL files from templates',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )
    
    parser.add_argument(
        'environment',
        nargs='?',
        default='dev',
        choices=['dev', 'staging', 'prod'],
        help='Target environment (default: dev)'
    )
    
    parser.add_argument(
        '--list-templates',
        action='store_true',
        help='List available template files'
    )
    
    parser.add_argument(
        '--show-config',
        action='store_true',
        help='Show configuration for all environments'
    )
    
    args = parser.parse_args()
    
    if args.list_templates:
        print("üìã Available template files:")
        for template in get_template_files():
            template_path = Path('snowflake') / template
            status = "‚úÖ" if template_path.exists() else "‚ùå"
            print(f"   {status} {template}")
        return
    
    if args.show_config:
        print("üìã Environment configurations:")
        config = get_default_config()
        for env, vars in config.items():
            print(f"\n{env.upper()}:")
            for key, value in vars.items():
                print(f"   {key}: {value}")
        return
    
    # Generate SQL files
    success = generate_sql_files(args.environment)
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main() 